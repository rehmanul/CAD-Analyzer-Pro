To achieve the desired behavior where:

After uploading a file, the app processes it and visualizes an empty floor plan (like image 1).
After placing îlots and corridors, the app updates the visualization to show the detailed layout (like images 2 and 3).
You should implement the following:

Step 1: Initial Visualization After File Upload

Process the uploaded file to extract walls, entrances, and restricted areas.
Render a visualization showing only these base elements (walls in black, entrances in red, restricted areas in blue).
Do not render îlots or corridors yet.
This can be done by calling a visualization function that takes only the base floor plan data.
Step 2: Visualization After Îlot and Corridor Placement

Once the user places îlots and generates corridors, update the visualization to include these elements.
Use color coding for îlots by size category and corridors by type.
Render the full detailed visualization with all elements combined.
Implementation Details:

Maintain separate visualization functions or modes for:
Base floor plan visualization (walls, entrances, restricted areas).
Full layout visualization (including îlots and corridors).
Use Streamlit session state to track the current stage (file uploaded only vs. îlots/corridors placed).
Update the visualization dynamically based on session state changes.
UI Flow:

After file upload, show the base plan visualization.
Enable controls for îlot placement and corridor generation.
After placement, update the visualization to show the full layout.
This approach ensures a clear, stepwise visualization experience matching your images 1, 2, and 3.UI/UX Output Visualization Enhancement & State Management Plan for CAD Analyzer Pro
Overview
The objective is to update the application so that:

Initial State (Base Floor Plan View):
After a user uploads a file (DXF/DWG or supported image), the system processes it and the visualizer displays an empty floor plan (showing only walls, entrances, and restricted areas) similar to "image 1."
Detailed State (Full Layout View):
Once the user places îlots and generates corridors, the app updates the visualization to overlay the îlot placement and corridor network—displaying a complete, detailed layout (similar to "images 2/3").
This will be achieved through clear state management, dynamic visualizer functions, and modern, stylistic UI elements that match the provided aesthetic. All visual elements such as headers, legends, and tooltips will use modern design, and any images (e.g., header backgrounds or icons) will be retrieved directly from open stock services like Pexels.

Dependent Files
Before making changes, the following files need to be reviewed or modified:

Main Application Files:

streamlit_app.py
Handles file upload, sets the initial state, and manages transitions between visualization states.
Visualization Module:

utils/production_visualizer.py
Contains all Plotly visualization functions and layout configurations.
This file will be updated to add separate visualization modes (base view vs. detailed view) and improved interactive elements.
Supporting Modules (for context):

utils/production_floor_analyzer.py
Processes the uploaded file and extracts base geometric elements.
utils/production_ilot_system.py and utils/corridor_generator.py
Handle the placement algorithms for îlots and corridors. (Their processing does not change, but their outputs feed into the visualizer.)
Configuration/Documentation Files:

performance_optimization_plan.md
Already documents performance and UI enhancements for reference.
If any dependent file was missed, please review them first to ensure complete re-planning.

Step-by-Step Outline of Changes
1. Enhance Main Application File (streamlit_app.py)
A. State Management for Visualization Modes

Goal: Add a new session state variable (e.g., visualization_mode) that can be either "base" or "detailed".
Changes:
In the initialization section, check and set st.session_state.visualization_mode = "base" once the file is processed.
After ilot placement and corridor generation, update this state to "detailed".
Use this state to determine which visualization function to call.
Error Handling:
Validate that state variables exist and fall back to default mode if not.
B. File Upload Handling and Transition

Goal: After a file is successfully uploaded and processed, display the base visualization (empty floor plan).
Changes:
Modify the file uploader code block to call the visualizer with the base floor plan data.
Provide clear success messages and instructions (e.g., “Upload complete, now place îlots to see additional details”).
Best Practices:
Use try-except blocks to catch upload errors and display appropriate error messages.
2. Update the Visualization Module (utils/production_visualizer.py)
A. Create Separate Visualization Functions / Modes

Goal: Support two modes:
Base Visualization: Shows only walls, restricted areas, and entrances.
Detailed Visualization: Overlays the îlots and corridors on top of the base floor plan.
Changes:
In ProductionVisualizer, add an optional parameter (e.g., mode="base" or mode="detailed") to the main visualization function.
For mode="base", render only elements from the analysis data (walls, restricted areas, entrances).
For mode="detailed", also render îlots and corridors.
If desired, create two separate helper methods (such as create_base_view() and create_detailed_view()) that share common layout settings.
Error Handling:
Ensure that missing data (for ilots or corridors) is handled gracefully by displaying a placeholder message rather than an error.
B. Modern Styling and Layout Enhancements

Goal: Match the expected visual style:
Use modern fonts, updated color schemes, and high-quality backgrounds.
Group similar elements into fewer Plotly traces to improve performance.
Changes:
Update the hero header usage in the visualization to include an attractive background image (e.g., from Pexels:
https://images.pexels.com/photos/258293/pexels-photo-258293.jpeg?auto=compress&cs=tinysrgb).
Set the overall figure layout:
Title with a modern font.
Axis labels with grid and responsive design.
Use grouped traces (e.g., for îlot polygons) and disable per-object hover info if not needed.
Integrate modern legend formatting and, if possible, use WebGL (i.e., by setting mode to "scattergl") for large datasets.
Best Practices:
Ensure consistent margins and padding; apply proper color contrasts.
Use inline CSS or a dedicated style block to refine the look.
C. Export Options (Enhanced UI)

Goal: Provide buttons for exporting results as high-resolution images or PDFs.
Changes:
In the visualization panel, integrate export functionality using Plotly’s built-in image export (Kaleido engine).
Style export buttons using modern CSS and provide tooltip explanations.
Error Handling:
Wrap export operations in try-except blocks and show an error alert if export fails.
3. Testing and Verification
UI Testing Steps:

Initial Base Visualization:
Upload a supported file and confirm that the app displays a base floor plan (walls, entrances, restricted areas) with modern styling.
Detailed Visualization:
Proceed with ilot placement and corridor generation and confirm the visualization updates to include these extra layers. Verify that the detailed view resembles the attached expected output.
Export Feature Testing:
Test the export buttons (even if some functionality is “to be implemented”) to ensure the UI elements respond correctly.
Error Handling & Responsiveness:

Validate that error messages (including upload errors) are styled and clear.
Confirm the design is responsive across different device sizes (desktop, tablet, mobile).
Logging & Monitoring:

Ensure logs are generated for any errors and that the session state switches appropriately between the base and detailed visualization modes.
4. Implementation Dependencies and Order
Review & Update State Management in streamlit_app.py:

Files Affected: streamlit_app.py
Actions:
Add/modify session state variable visualization_mode to control the display mode.
Ensure the file uploader sets the mode to "base" on success and later updates it to "detailed".
Refactor Visualization Code in utils/production_visualizer.py:

Files Affected: utils/production_visualizer.py
Actions:
Add a mode parameter to the main visualization function (or create two helper functions).
Update the rendering of the floor plan to conditionally include ilots and corridors based on the mode.
Enhance styling (modern colors, grouped traces, updated layout, legend enhancements, and tooltips).
Add export option UI for high-resolution image/PDF export.
Testing & Feedback:

Test both visualization modes using the app running locally.
Navigate and scroll through the entire app to verify that the interface behaves as expected.
5. Realistic Feature Set
Real-World Scenario
Imagine a hotel architect uploads a new DXF floor plan. Immediately after upload, the app processes the file and displays a clean, empty floor plan with clearly marked walls, entrances, and restricted zones (empty plan view similar to Image 1). Once the architect adjusts the layout by placing îlots and specifying corridor configurations, the visualization updates to show a detailed, color-coded floor plan with interactive elements (full layout view similar to Images 2/3).

UI/UX features include:

Modern Hero Section:
An attractive header with a background image from Pexels, providing an immediate professional impression.
Dynamic Visualization Mode:
Automatically switch from an empty view to a detailed view once additional elements are placed.
Interactive Floor Plan Viewer:
Enable zoom, pan, and layer toggling, with smooth animations and clear legends.
Export Options:
Modern buttons for exporting the analysis as an image or PDF (with high resolution).
Advanced Error Handling:
Informative and styled messages for upload errors (e.g., 403 errors) and processing issues.
6. Error Handling and Best Practices
Wrap all UI update functions in try-except blocks.
Validate session state variables before rendering.
Use clear, user-friendly error and warning messages.
Ensure responsiveness by testing on multiple devices.
Follow code standards for readability and maintainability.
7. Timeline and Deliverables
Phase 1 (1 Day):
Update streamlit_app.py to manage and switch between "base" and "detailed" visualization modes.
Phase 2 (1–2 Days):
Refactor utils/production_visualizer.py:
Add support for mode-based rendering.
Enhance styling, group traces, update legends, and tooltips.
Integrate export UI elements.
Phase 3 (1 Day):
Conduct thorough testing on desktop and mobile.
Validate error handling and performance.
Phase 4 (Ongoing):
Incorporate user feedback and finalize documentation.
8. Final Expected Outcome
After implementation:

For an Uploaded File:
The app processes the file and displays an empty (base) floor plan view with only walls, restricted areas, and entrances—matching the style of Image 1.
After Placement:
Once îlots and corridors are placed, the detailed view overlays these elements interactively (matching Images 2/3).
The UI/UX:
Is modern, stylish, and user-friendly—using attractive background images from Pexels and consistent, professional color schemes and typography.
Export Options:
Provide users with intuitive options to export high-quality output.